---
- name: Create gui-management namespace
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: gui-management
        labels:
          name: gui-management

- name: Create GUI management backend deployment
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: gui-backend
        namespace: gui-management
      spec:
        replicas: 2
        selector:
          matchLabels:
            app: gui-backend
        template:
          metadata:
            labels:
              app: gui-backend
          spec:
            serviceAccountName: gui-management-api
            containers:
            - name: backend
              image: nginx:alpine
              ports:
              - containerPort: 80
              volumeMounts:
              - name: nginx-config
                mountPath: /etc/nginx/conf.d
              - name: static-files
                mountPath: /usr/share/nginx/html
            volumes:
            - name: nginx-config
              configMap:
                name: nginx-config
            - name: static-files
              configMap:
                name: gui-static-files

- name: Create GUI management frontend deployment
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: gui-frontend
        namespace: gui-management
      spec:
        replicas: 2
        selector:
          matchLabels:
            app: gui-frontend
        template:
          metadata:
            labels:
              app: gui-frontend
          spec:
            containers:
            - name: frontend
              image: nginx:alpine
              ports:
              - containerPort: 80
              volumeMounts:
              - name: frontend-config
                mountPath: /etc/nginx/conf.d
              - name: frontend-files
                mountPath: /usr/share/nginx/html
            volumes:
            - name: frontend-config
              configMap:
                name: frontend-config
            - name: frontend-files
              configMap:
                name: frontend-files

- name: Create ServiceAccount for GUI management API
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: gui-management-api
        namespace: gui-management

- name: Create ClusterRole for GUI management API
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: gui-management-api
      rules:
      - apiGroups: [""]
        resources: ["nodes", "namespaces", "pods", "services", "persistentvolumes", "persistentvolumeclaims"]
        verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
      - apiGroups: ["apps"]
        resources: ["deployments", "daemonsets", "replicasets", "statefulsets"]
        verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
      - apiGroups: ["rbac.authorization.k8s.io"]
        resources: ["roles", "rolebindings", "clusterroles", "clusterrolebindings"]
        verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
      - apiGroups: [""]
        resources: ["resourcequotas", "limitranges"]
        verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
      - apiGroups: ["storage.k8s.io"]
        resources: ["storageclasses"]
        verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

- name: Create ClusterRoleBinding for GUI management API
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: gui-management-api-binding
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: gui-management-api
      subjects:
      - kind: ServiceAccount
        name: gui-management-api
        namespace: gui-management

- name: Create backend service
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: gui-backend-service
        namespace: gui-management
      spec:
        selector:
          app: gui-backend
        ports:
        - port: 80
          targetPort: 80
          protocol: TCP
        type: ClusterIP

- name: Create frontend service
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: gui-frontend-service
        namespace: gui-management
      spec:
        selector:
          app: gui-frontend
        ports:
        - port: 80
          targetPort: 80
          protocol: TCP
        type: ClusterIP

- name: Create GUI management ingress
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: networking.k8s.io/v1
      kind: Ingress
      metadata:
        name: gui-management-ingress
        namespace: gui-management
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
          nginx.ingress.kubernetes.io/ssl-redirect: "false"
      spec:
        rules:
        - host: "{{ api_server_lb_ip }}"
          http:
            paths:
            - path: /gui
              pathType: Prefix
              backend:
                service:
                  name: gui-frontend-service
                  port:
                    number: 80
            - path: /api
              pathType: Prefix
              backend:
                service:
                  name: gui-backend-service
                  port:
                    number: 80

- name: Create nginx configuration for backend
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: nginx-config
        namespace: gui-management
      data:
        default.conf: |
          server {
              listen 80;
              server_name _;
              
              location /api/ {
                  proxy_pass http://localhost:8000/;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
              
              location / {
                  root /usr/share/nginx/html;
                  index index.html;
                  try_files $uri $uri/ /index.html;
              }
          }

- name: Create frontend configuration
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: frontend-config
        namespace: gui-management
      data:
        default.conf: |
          server {
              listen 80;
              server_name _;
              root /usr/share/nginx/html;
              index index.html;
              
              location / {
                  try_files $uri $uri/ /index.html;
              }
              
              location /api/ {
                  proxy_pass http://gui-backend-service.gui-management.svc.cluster.local/api/;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          }

- name: Create GUI static files
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: gui-static-files
        namespace: gui-management
      data:
        index.html: |
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Kubernetes Cluster Management</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }
                  .container { max-width: 1200px; margin: 0 auto; }
                  .header { background: #2c3e50; color: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
                  .card { background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); margin-bottom: 20px; }
                  .btn { background: #3498db; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; margin: 5px; }
                  .btn:hover { background: #2980b9; }
                  .btn-danger { background: #e74c3c; }
                  .btn-danger:hover { background: #c0392b; }
                  .status { padding: 5px 10px; border-radius: 4px; color: white; }
                  .status.ready { background: #27ae60; }
                  .status.pending { background: #f39c12; }
                  .status.error { background: #e74c3c; }
                  table { width: 100%; border-collapse: collapse; }
                  th, td { padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }
                  th { background-color: #f8f9fa; }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>üöÄ Kubernetes Cluster Management</h1>
                      <p>Manage your Hetzner baremetal Kubernetes cluster</p>
                  </div>
                  
                  <div class="card">
                      <h2>üìä Cluster Overview</h2>
                      <div id="cluster-status">Loading...</div>
                  </div>
                  
                  <div class="card">
                      <h2>üñ•Ô∏è Server Management</h2>
                      <button class="btn" onclick="addServer()">Add Server</button>
                      <button class="btn btn-danger" onclick="removeServer()">Remove Server</button>
                      <div id="servers-list">Loading...</div>
                  </div>
                  
                  <div class="card">
                      <h2>üë• User Management</h2>
                      <button class="btn" onclick="createUser()">Create User</button>
                      <div id="users-list">Loading...</div>
                  </div>
                  
                  <div class="card">
                      <h2>üìà Resource Management</h2>
                      <div id="resource-quotas">Loading...</div>
                  </div>
                  
                  <div class="card">
                      <h2>üìä Monitoring</h2>
                      <a href="/grafana" class="btn" target="_blank">Grafana Dashboard</a>
                      <a href="/rancher" class="btn" target="_blank">Rancher UI</a>
                  </div>
              </div>
              
              <script>
                  async function loadClusterStatus() {
                      try {
                          const response = await fetch('/api/cluster/status');
                          const data = await response.json();
                          document.getElementById('cluster-status').innerHTML = `
                              <p><strong>Cluster Name:</strong> ${data.clusterName}</p>
                              <p><strong>Nodes:</strong> ${data.nodeCount}</p>
                              <p><strong>Pods:</strong> ${data.podCount}</p>
                              <p><strong>Status:</strong> <span class="status ready">Healthy</span></p>
                          `;
                      } catch (error) {
                          document.getElementById('cluster-status').innerHTML = '<p class="status error">Error loading cluster status</p>';
                      }
                  }
                  
                  async function loadServers() {
                      try {
                          const response = await fetch('/api/servers');
                          const servers = await response.json();
                          const table = `
                              <table>
                                  <thead>
                                      <tr>
                                          <th>Name</th>
                                          <th>IP</th>
                                          <th>Role</th>
                                          <th>Status</th>
                                          <th>Actions</th>
                                      </tr>
                                  </thead>
                                  <tbody>
                                      ${servers.map(server => `
                                          <tr>
                                              <td>${server.name}</td>
                                              <td>${server.ip}</td>
                                              <td>${server.role}</td>
                                              <td><span class="status ready">Ready</span></td>
                                              <td>
                                                  <button class="btn btn-danger" onclick="removeServer('${server.name}')">Remove</button>
                                              </td>
                                          </tr>
                                      `).join('')}
                                  </tbody>
                              </table>
                          `;
                          document.getElementById('servers-list').innerHTML = table;
                      } catch (error) {
                          document.getElementById('servers-list').innerHTML = '<p class="status error">Error loading servers</p>';
                      }
                  }
                  
                  async function loadUsers() {
                      try {
                          const response = await fetch('/api/users');
                          const users = await response.json();
                          const table = `
                              <table>
                                  <thead>
                                      <tr>
                                          <th>Username</th>
                                          <th>Namespace</th>
                                          <th>CPU Limit</th>
                                          <th>Memory Limit</th>
                                          <th>Actions</th>
                                      </tr>
                                  </thead>
                                  <tbody>
                                      ${users.map(user => `
                                          <tr>
                                              <td>${user.username}</td>
                                              <td>${user.namespace}</td>
                                              <td>${user.cpuLimit}</td>
                                              <td>${user.memoryLimit}</td>
                                              <td>
                                                  <button class="btn" onclick="editUser('${user.username}')">Edit</button>
                                                  <button class="btn btn-danger" onclick="deleteUser('${user.username}')">Delete</button>
                                              </td>
                                          </tr>
                                      `).join('')}
                                  </tbody>
                              </table>
                          `;
                          document.getElementById('users-list').innerHTML = table;
                      } catch (error) {
                          document.getElementById('users-list').innerHTML = '<p class="status error">Error loading users</p>';
                      }
                  }
                  
                  function addServer() {
                      const name = prompt('Enter server name:');
                      const ip = prompt('Enter server IP:');
                      const role = prompt('Enter server role (worker/control-plane):');
                      if (name && ip && role) {
                          fetch('/api/servers', {
                              method: 'POST',
                              headers: { 'Content-Type': 'application/json' },
                              body: JSON.stringify({ name, ip, role })
                          }).then(() => loadServers());
                      }
                  }
                  
                  function removeServer(name) {
                      if (confirm(`Remove server ${name}?`)) {
                          fetch(`/api/servers/${name}`, { method: 'DELETE' })
                              .then(() => loadServers());
                      }
                  }
                  
                  function createUser() {
                      const username = prompt('Enter username:');
                      const namespace = prompt('Enter namespace:');
                      const cpuLimit = prompt('Enter CPU limit (e.g., 2):');
                      const memoryLimit = prompt('Enter memory limit (e.g., 4Gi):');
                      if (username && namespace && cpuLimit && memoryLimit) {
                          fetch('/api/users', {
                              method: 'POST',
                              headers: { 'Content-Type': 'application/json' },
                              body: JSON.stringify({ username, namespace, cpuLimit, memoryLimit })
                          }).then(() => loadUsers());
                      }
                  }
                  
                  function editUser(username) {
                      alert(`Edit user ${username} - Feature coming soon!`);
                  }
                  
                  function deleteUser(username) {
                      if (confirm(`Delete user ${username}?`)) {
                          fetch(`/api/users/${username}`, { method: 'DELETE' })
                              .then(() => loadUsers());
                      }
                  }
                  
                  // Load data on page load
                  loadClusterStatus();
                  loadServers();
                  loadUsers();
                  
                  // Refresh data every 30 seconds
                  setInterval(() => {
                      loadClusterStatus();
                      loadServers();
                      loadUsers();
                  }, 30000);
              </script>
          </body>
          </html>

- name: Create frontend files
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: frontend-files
        namespace: gui-management
      data:
        index.html: |
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Kubernetes Cluster Management</title>
              <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
              <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
          </head>
          <body>
              <nav class="navbar navbar-dark bg-dark">
                  <div class="container-fluid">
                      <span class="navbar-brand mb-0 h1">
                          <i class="fas fa-cube"></i> Kubernetes Cluster Management
                      </span>
                  </div>
              </nav>
              
              <div class="container mt-4">
                  <div class="row">
                      <div class="col-md-12">
                          <div class="card">
                              <div class="card-header">
                                  <h5><i class="fas fa-tachometer-alt"></i> Dashboard</h5>
                              </div>
                              <div class="card-body">
                                  <p>Welcome to the Kubernetes Cluster Management interface!</p>
                                  <p>This GUI provides comprehensive management capabilities for your Hetzner baremetal Kubernetes cluster.</p>
                                  
                                  <div class="row mt-4">
                                      <div class="col-md-3">
                                          <div class="card text-center">
                                              <div class="card-body">
                                                  <i class="fas fa-server fa-3x text-primary"></i>
                                                  <h5 class="mt-2">Server Management</h5>
                                                  <p class="text-muted">Add/remove servers from cluster</p>
                                              </div>
                                          </div>
                                      </div>
                                      <div class="col-md-3">
                                          <div class="card text-center">
                                              <div class="card-body">
                                                  <i class="fas fa-users fa-3x text-success"></i>
                                                  <h5 class="mt-2">User Management</h5>
                                                  <p class="text-muted">Create users and namespaces</p>
                                              </div>
                                          </div>
                                      </div>
                                      <div class="col-md-3">
                                          <div class="card text-center">
                                              <div class="card-body">
                                                  <i class="fas fa-chart-bar fa-3x text-warning"></i>
                                                  <h5 class="mt-2">Resource Management</h5>
                                                  <p class="text-muted">Configure resource quotas</p>
                                              </div>
                                          </div>
                                      </div>
                                      <div class="col-md-3">
                                          <div class="card text-center">
                                              <div class="card-body">
                                                  <i class="fas fa-eye fa-3x text-info"></i>
                                                  <h5 class="mt-2">Monitoring</h5>
                                                  <p class="text-muted">Monitor cluster health</p>
                                              </div>
                                          </div>
                                      </div>
                                  </div>
                                  
                                  <div class="mt-4">
                                      <h6>Quick Links:</h6>
                                      <a href="/rancher" class="btn btn-outline-primary me-2" target="_blank">
                                          <i class="fas fa-external-link-alt"></i> Rancher UI
                                      </a>
                                      <a href="/grafana" class="btn btn-outline-success me-2" target="_blank">
                                          <i class="fas fa-chart-line"></i> Grafana Dashboard
                                      </a>
                                      <a href="/api" class="btn btn-outline-info" target="_blank">
                                          <i class="fas fa-code"></i> API Documentation
                                      </a>
                                  </div>
                              </div>
                          </div>
                      </div>
                  </div>
              </div>
              
              <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
          </body>
          </html>