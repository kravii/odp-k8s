#!/bin/bash
# Kubernetes Cluster Bootstrap Quick Start Script
# Interactive setup wizard for new users

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Banner
show_banner() {
    cat << "EOF"
╔══════════════════════════════════════════════════════════════╗
║                Kubernetes Cluster Bootstrap                  ║
║                   Quick Start Wizard                         ║
╚══════════════════════════════════════════════════════════════╝
EOF
}

# Check prerequisites
check_prerequisites() {
    log_info "Checking prerequisites..."
    
    # Check Python
    if ! command -v python3 &> /dev/null; then
        log_error "Python 3 is required but not installed"
        exit 1
    fi
    
    # Check pip
    if ! command -v pip &> /dev/null && ! command -v pip3 &> /dev/null; then
        log_error "pip is required but not installed"
        exit 1
    fi
    
    # Check SSH
    if ! command -v ssh &> /dev/null; then
        log_error "SSH client is required but not installed"
        exit 1
    fi
    
    log_success "Prerequisites check passed"
}

# Install dependencies
install_dependencies() {
    log_info "Installing Python dependencies..."
    
    if command -v pip3 &> /dev/null; then
        pip3 install -r requirements.txt
    else
        pip install -r requirements.txt
    fi
    
    log_success "Dependencies installed"
}

# Interactive inventory creation
create_inventory() {
    log_info "Creating inventory file..."
    
    echo "Let's create your cluster inventory file."
    echo ""
    
    # Get cluster name
    read -p "Enter cluster name (default: my-cluster): " CLUSTER_NAME
    CLUSTER_NAME=${CLUSTER_NAME:-my-cluster}
    
    # Get number of nodes
    read -p "How many nodes do you have? (minimum 3): " NODE_COUNT
    if [ "$NODE_COUNT" -lt 3 ]; then
        log_error "Minimum 3 nodes required for HA cluster"
        exit 1
    fi
    
    # Create inventory file
    INVENTORY_FILE="${CLUSTER_NAME}-inventory.yaml"
    
    cat > "$INVENTORY_FILE" << EOF
# Kubernetes Cluster Inventory: $CLUSTER_NAME
# Generated by quick-start wizard

hosts:
EOF
    
    # Add nodes
    for i in $(seq 1 "$NODE_COUNT"); do
        echo ""
        echo "Node $i:"
        
        read -p "  Hostname (default: node-$i): " HOSTNAME
        HOSTNAME=${HOSTNAME:-node-$i}
        
        read -p "  IP Address: " IP_ADDRESS
        if [ -z "$IP_ADDRESS" ]; then
            log_error "IP address is required"
            exit 1
        fi
        
        read -p "  SSH Username (default: root): " USERNAME
        USERNAME=${USERNAME:-root}
        
        read -p "  SSH Port (default: 22): " SSH_PORT
        SSH_PORT=${SSH_PORT:-22}
        
        read -p "  OS (ubuntu/centos/rocky, default: ubuntu): " OS
        OS=${OS:-ubuntu}
        
        read -p "  OS Version (default: 22.04): " OS_VERSION
        OS_VERSION=${OS_VERSION:-22.04}
        
        cat >> "$INVENTORY_FILE" << EOF
  - hostname: $HOSTNAME
    ip_address: $IP_ADDRESS
    username: $USERNAME
    ssh_port: $SSH_PORT
    os: $OS
    os_version: "$OS_VERSION"
    group: $CLUSTER_NAME
EOF
    done
    
    log_success "Inventory file created: $INVENTORY_FILE"
    echo "$INVENTORY_FILE"
}

# Test SSH connectivity
test_connectivity() {
    local inventory_file="$1"
    
    log_info "Testing SSH connectivity..."
    
    # Extract IPs from inventory
    local ips=$(python3 -c "
import yaml
with open('$inventory_file', 'r') as f:
    data = yaml.safe_load(f)
for host in data['hosts']:
    print(host['ip_address'])
")
    
    local failed_connections=()
    
    for ip in $ips; do
        log_info "Testing connection to $ip..."
        if timeout 10 ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no root@$ip "echo 'Connection successful'" &>/dev/null; then
            log_success "Connected to $ip"
        else
            log_error "Failed to connect to $ip"
            failed_connections+=("$ip")
        fi
    done
    
    if [ ${#failed_connections[@]} -gt 0 ]; then
        log_warning "Some connections failed: ${failed_connections[*]}"
        read -p "Continue anyway? (y/N): " CONTINUE
        if [[ ! "$CONTINUE" =~ ^[Yy]$ ]]; then
            log_info "Please fix SSH connectivity and run the script again"
            exit 1
        fi
    else
        log_success "All SSH connections successful"
    fi
}

# Create configuration
create_config() {
    local cluster_name="$1"
    
    log_info "Creating cluster configuration..."
    
    CONFIG_FILE="${cluster_name}-config.yaml"
    
    # Ask for configuration preferences
    echo "Cluster configuration options:"
    echo ""
    
    read -p "Kubernetes version (default: 1.28.0): " K8S_VERSION
    K8S_VERSION=${K8S_VERSION:-1.28.0}
    
    read -p "Pod network CIDR (default: 10.244.0.0/16): " POD_CIDR
    POD_CIDR=${POD_CIDR:-10.244.0.0/16}
    
    read -p "Service CIDR (default: 10.96.0.0/12): " SERVICE_CIDR
    SERVICE_CIDR=${SERVICE_CIDR:-10.96.0.0/12}
    
    read -p "Container runtime (containerd/docker, default: containerd): " CONTAINER_RUNTIME
    CONTAINER_RUNTIME=${CONTAINER_RUNTIME:-containerd}
    
    read -p "Timezone (default: UTC): " TIMEZONE
    TIMEZONE=${TIMEZONE:-UTC}
    
    # Create config file
    cat > "$CONFIG_FILE" << EOF
# Kubernetes Cluster Configuration: $cluster_name
# Generated by quick-start wizard

kubernetes_version: "$K8S_VERSION"
pod_network_cidr: "$POD_CIDR"
service_cidr: "$SERVICE_CIDR"
container_runtime: "$CONTAINER_RUNTIME"
cni_plugin: "flannel"
storage_class: "local-path"
timezone: "$TIMEZONE"

ntp_servers:
  - "pool.ntp.org"
  - "time.google.com"

firewall_rules:
  control_plane_ports:
    - 6443
    - 2379
    - 2380
    - 10250
    - 10251
    - 10252
    - 10259
    - 10257
  
  worker_ports:
    - 10250
    - 30000
    - 32767
  
  common_ports:
    - 22
    - 80
    - 443
    - 53

advanced:
  audit_logging: false
  pod_security_standards: "privileged"
  resource_limits:
    cpu: "2"
    memory: "4Gi"
EOF
    
    log_success "Configuration file created: $CONFIG_FILE"
    echo "$CONFIG_FILE"
}

# Run bootstrap
run_bootstrap() {
    local inventory_file="$1"
    local config_file="$2"
    
    log_info "Ready to bootstrap cluster!"
    echo ""
    echo "Configuration summary:"
    echo "  Inventory: $inventory_file"
    echo "  Config: $config_file"
    echo ""
    
    read -p "Run dry-run first? (Y/n): " DRY_RUN
    DRY_RUN=${DRY_RUN:-Y}
    
    if [[ "$DRY_RUN" =~ ^[Yy]$ ]]; then
        log_info "Running dry-run..."
        python3 bootstrap_cluster.py "$inventory_file" --config "$config_file" --dry-run
        
        echo ""
        read -p "Dry-run completed. Continue with actual bootstrap? (y/N): " CONTINUE
        if [[ ! "$CONTINUE" =~ ^[Yy]$ ]]; then
            log_info "Bootstrap cancelled"
            exit 0
        fi
    fi
    
    log_info "Starting cluster bootstrap..."
    python3 bootstrap_cluster.py "$inventory_file" --config "$config_file"
    
    if [ $? -eq 0 ]; then
        log_success "Cluster bootstrap completed successfully!"
        echo ""
        echo "Next steps:"
        echo "1. SSH to your master node: ssh root@<master-ip>"
        echo "2. Check cluster status: kubectl get nodes"
        echo "3. Check pods: kubectl get pods --all-namespaces"
        echo "4. Deploy applications to your cluster"
    else
        log_error "Cluster bootstrap failed"
        echo "Check the logs above for error details"
        exit 1
    fi
}

# Main function
main() {
    show_banner
    
    log_info "Welcome to Kubernetes Cluster Bootstrap Quick Start!"
    echo ""
    
    # Check prerequisites
    check_prerequisites
    
    # Install dependencies
    install_dependencies
    
    # Create inventory
    inventory_file=$(create_inventory)
    
    # Test connectivity
    test_connectivity "$inventory_file"
    
    # Create configuration
    cluster_name=$(basename "$inventory_file" -inventory.yaml)
    config_file=$(create_config "$cluster_name")
    
    # Run bootstrap
    run_bootstrap "$inventory_file" "$config_file"
}

# Run main function
main "$@"